#!/bin/bash

source $HOME/zcmd/devutils/default-docker-env.txt
source $HOME/zcmd/devutils/function-library/check-context.bash

lib_isMachineImageFolder
if [ $? -ne 0 ]; then
    echo "ERROR: The command must be invoked from a valid machine context folder."
    exit 2
fi

source machine.env

echo "This script writes the latest locally built image to the shared private Docker registry"
echo "Usage: zcmd shareimage PUBLIC_TAGNAME"
echo

PUBLIC_TAGNAME=$1
if [ -z "$PUBLIC_TAGNAME" ]; then
    echo "ERROR: Missing required PUBLIC_TAGNAME value!"
    echo
    echo "NOTE: By default, Docker pulls tag "latest" so provide that value with caution."
    echo "      Consider version controlling your tags with YYYYMMDD.# format tag names"
    echo
    exit 1
    PUBLIC_TAGNAME="latest"
fi

echo " --- registry $PRIVATE_DOCKER_REGISTRY"
echo " --- local image name $LOCAL_IMAGE_NAME"
echo " --- public image name $PUBLIC_IMAGE_NAME"
echo " --- public tag name $PUBLIC_TAGNAME"

PWD=$(pwd)
if [ -f "${PWD}/DEPRECATED.txt" ]; then
    echo
    echo "WARNING: ${PWD} is DEPRECATED"
    echo
    echo "==========================================================================="
    echo
    cat ${PWD}/DEPRECATED.txt
    echo
    echo "==========================================================================="
    echo
    echo "PRESS CTRL-C now to ABORT else ENTER to continue"
    read
    echo
fi

PWD=$(pwd)
if [ -f "${PWD}/SUSPECT.txt" ]; then
    echo
    echo "FATAL: ${PWD} is SUSPECT so SHARING is not yet allowed!"
    echo "FOUND FLAG FILE: ${PWD}/SUSPECT.txt"
    echo "TIP: Remove this flag file AFTER vetting that the source of the image is safe to share."
    echo "FLAG FILE DETAILS..."
    echo "==========================================================================="
    echo
    cat ${PWD}/SUSPECT.txt
    echo
    echo "==========================================================================="
    echo
    exit 2
fi

CMD="docker tag local/${LOCAL_IMAGE_NAME}:latest ${PRIVATE_DOCKER_REGISTRY}/${PUBLIC_IMAGE_NAME}:${PUBLIC_TAGNAME}"
echo $CMD
eval $CMD
EC=$?
if [ $EC -ne 0 ]; then
    echo "!!!!!!!!!!!! EXIT CODE $EC !!!!!!!!!!!!!!!!!!"
    exit 1
fi

echo
echo "Now we push $PUBLIC_IMAGE_NAME into $PRIVATE_DOCKER_REGISTRY ..."

CMD="docker push ${PRIVATE_DOCKER_REGISTRY}/${PUBLIC_IMAGE_NAME}"
echo $CMD
eval $CMD

echo
echo "Completed push of $PUBLIC_IMAGE_NAME into $PRIVATE_DOCKER_REGISTRY"
echo
