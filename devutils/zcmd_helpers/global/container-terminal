#!/bin/bash
VERSIONINFO=20200525.1

source $HOME/zcmd/devutils/default-docker-env.txt

BASENAME=$(basename $0)
echo "SCRIPT PURPOSE: Open a command-line terminal into a running docker container"
echo "SYNTAX: zcmd $BASENAME [CONTAINER_NAME] [USERNAME] [CMD_OVERRIDE] [WORKDIR]"
echo

THELIST=$(docker container ls | awk '{print $NF}')

ORIGINALARGVALUE=$1
CONTAINERNAME=$1
if [ ! -z "$CONTAINERNAME" ]; then

    FOUNDIT=""
    for NAME in $(docker container ls | awk '{print $NF}'); do
      if [ "$NAME" = "$CONTAINERNAME" ]; then
        FOUNDIT="$CONTAINERNAME"
        break
      fi
    done

    if [ -z "$FOUNDIT" ]; then
        #NOT a valid container name!
        echo "$CONTAINERNAME is NOT a valid container name"
    else
        echo "$CONTAINERNAME container found"
    fi

    CONTAINERNAME="$FOUNDIT"
fi

USERNAME=$2
if [ -z "$USERNAME" ]; then
    USERNAME="DEFAULT"
fi

CT_CMD=$3
if [ -z "$CT_CMD" ]; then
    CT_CMD="DEFAULT"
fi

WORKDIR=$4
if [ -z "$WORKDIR" ]; then
    WORKDIR="DEFAULT"
fi

echo
echo "INPUT: $0 $1 $2"
if [ -z "$ORIGINALARGVALUE" ]; then 
    echo "  CONTAINERNAME = MISSING"
else
    echo "  CONTAINERNAME = $ORIGINALARGVALUE"
fi
echo "  USERNAME      = $USERNAME"
echo

function pickContainer()
{
    unset options i
    i=0
    for NAME in $(docker container ls | awk '{print $NF}'); do
      if [ ! "$NAME" = "NAMES" ]; then
        options[i++]="$NAME"
      fi
    done

    select OPT in "${options[@]}" "QUIT"; do
      case $OPT in
        "QUIT")
          echo "Exiting the script now!"
          echo
          CONTAINERNAME=""
          break
          ;;
        '')
          echo "Not a valid option"
          ;;
        *)
          echo "Container named $OPT selected ..."
          echo
          CONTAINERNAME="$OPT"
          break
          ;;
      esac
    done
}

if [ -z "$CONTAINERNAME" ]; then
    
    echo "Missing a valid container name!"
    echo "PICK A CONTAINER ..."

    pickContainer

    #echo "$THELIST"

    #echo
    #echo "Must provide a container name!"
    if [ -z "$CONTAINERNAME" ]; then
        exit 1
    fi
fi

source $HOME/zcmd/devutils/default-docker-env.txt
source $HOME/zcmd/devutils/function-library/check-context.bash

#lib_isRuntimeStackFolder
#if [ $? -ne 0 ]; then
#    echo "ERROR: The command must be invoked from a valid stack context folder."
#    exit 2
#fi

ZCMD_LAUNCHDIR=$(pwd)
if [ -f ./stack.env ]; then
    #We have a stack environment, load it to get the defaults
    source ./stack.env
fi

if [ "DEFAULT" = "$USERNAME" ]; then
    echo "CONTAINER CONTEXT: Opening terminal to $CONTAINERNAME as DEFAULT USER ..."
    if [ "admin_zcmd_stub" = "${CONTAINERNAME}" ]; then
        #Special case the core admin stack stub
        USERARG=" --user=root"
    else
        if [ ! -z "$TERMINAL_USERNAME" ]; then
            USERARG=" --user=$TERMINAL_USERNAME"
        else
            USERARG=""
        fi
    fi
else
    echo "CONTAINER CONTEXT: Opening terminal to $CONTAINERNAME as USER=$USERNAME ..."
    USERARG=" --user=${USERNAME}"
fi

if [ "DEFAULT" = "$CT_CMD" ]; then
    echo "CONTAINER CONTEXT: Opening terminal to $CONTAINERNAME with DEFAULT COMMAND ..."
    if [ "admin_zcmd_stub" = "${CONTAINERNAME}" ]; then
        #Special case the core admin stack stub
        PROMPT_CMD="sh"
    else
        PROMPT_CMD="/bin/bash"
    fi
else
    echo "CONTAINER CONTEXT: Opening terminal to $CONTAINERNAME with COMMAND=$CT_CMD ..."
    PROMPT_CMD="$CT_CMD"
fi

if [ "DEFAULT" = "$WORKDIR" ]; then
    WORKDIRARG=""
else
    WORKDIRARG=" --workdir $WORKDIR"
fi

echo "  PROMPT_CMD    = $PROMPT_CMD"
echo "  WORKDIR       = $WORKDIR"

CMD="docker exec -ti ${USERARG} ${WORKDIRARG} ${CONTAINERNAME} ${PROMPT_CMD}"
echo $CMD
eval $CMD
EC=$?
if [ $EC -eq 0 ]; then
    echo
    echo "Successful terminal exit."
    echo
else
    echo
    echo "Terminal exit code $EC"
    echo
fi
